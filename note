<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>아카이빙 월드</title>
    <style>
      :root {
        --bg: #f6f6f6;
        --ink: #111;
        --scotch-1: #e7e6e3;
        --scotch-2: #d8d6d2;
        --bar-h: 88px;
        --tapeW: 80px;
        --tapeH: 40px; /* 요청 사이즈 */
        --tapeOpacity: 0.5; /* 테이프만 반투명 */
      }
      * {
        box-sizing: border-box;
      }
      html,
      body {
        height: 100%;
      }
      body {
        margin: 0;
        background: var(--bg);
        color: var(--ink);
        font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto,
          sans-serif;
        overflow: hidden;
      }
      #reset {
        position: fixed;
        top: 14px;
        left: 14px;
        z-index: 20;
        height: 36px;
        padding: 0 12px;
        border-radius: 8px;
        border: 1px solid rgba(0, 0, 0, 0.15);
        background: #fff;
        color: #111;
        font-weight: 700;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      }
      #reset:active {
        transform: translateY(1px);
      }
      #board {
        position: relative;
        height: calc(100% - var(--bar-h) - 16px);
        margin: 8px;
        border-radius: 12px;
        background: linear-gradient(180deg, #fff, #f4f4f2);
        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.06);
        isolation: isolate; /* 블렌딩 범위 제한 */
        overflow: hidden;
      }
      #bar {
        position: fixed;
        left: 12px;
        right: 12px;
        bottom: 8px;
        height: var(--bar-h);
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        z-index: 10;
      }
      .roll {
        flex: 1;
        height: 100%;
        position: relative;
        border-radius: 12px;
        padding: 10px 12px;
        display: flex;
        align-items: center;
        gap: 10px;
        background: linear-gradient(180deg, var(--scotch-1), var(--scotch-2));
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 1px 0 rgba(255, 255, 255, 0.6) inset,
          0 -1px 0 rgba(0, 0, 0, 0.05) inset, 0 8px 16px rgba(0, 0, 0, 0.06);
      }
      .roll:after {
        content: '';
        position: absolute;
        right: -18px;
        top: 8px;
        bottom: 8px;
        width: 32px;
        background: inherit;
        clip-path: polygon(
          0 0,
          60% 8%,
          35% 18%,
          80% 28%,
          30% 40%,
          90% 54%,
          40% 66%,
          96% 78%,
          50% 90%,
          100% 100%,
          0 100%
        );
        box-shadow: inset -6px 0 0 rgba(0, 0, 0, 0.06);
      }
      #word {
        flex: 1;
        height: 52px;
        background: #fff;
        border: 1px solid rgba(0, 0, 0, 0.15);
        border-radius: 10px;
        padding: 0 14px;
        font-size: 18px;
        outline: none;
      }
      #add {
        height: 52px;
        min-width: 96px;
        padding: 0 18px;
        border-radius: 10px;
        border: 1px solid rgba(0, 0, 0, 0.25);
        background: #242424;
        color: #fff;
        font-weight: 800;
        cursor: pointer;
      }
      #add:active {
        transform: translateY(1px);
      }

      /* === 테이프 본체 === */
      .tape {
        position: absolute;
        width: var(--tapeW);
        height: var(--tapeH);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        user-select: none;
        cursor: grab;
      }
      .tape .bg {
        position: absolute;
        inset: 0;
        border-radius: 8px;
        border: none; /* 외곽선 제거 */
        background: linear-gradient(180deg, var(--scotch-1), var(--scotch-2));
        box-shadow: 0 1px 0 rgba(255, 255, 255, 0.6) inset,
          0 -1px 0 rgba(0, 0, 0, 0.05) inset, 0 6px 12px rgba(0, 0, 0, 0.06);
        opacity: var(--tapeOpacity, 0.5);
        background-clip: padding-box;
        pointer-events: none;
        z-index: 0;
        mix-blend-mode: multiply; /* 겹칠수록 진해짐 */
      }

      /* === 덧붙이는 삼각형 조각 === */
      .tape .chip {
        position: absolute;
        background: linear-gradient(180deg, var(--scotch-1), var(--scotch-2));
        opacity: var(--tapeOpacity, 0.5);
        pointer-events: none;
        z-index: 1;
        border-radius: 2px;
      }

      .tape .label {
        position: relative;
        z-index: 2;
        padding: 2px 6px;
        font-weight: 900;
        font-size: 15px;
        color: #111;
        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.9);
        opacity: 1;
        text-align: center;
        max-width: calc(var(--tapeW) - 10px);
        overflow-wrap: anywhere;
      }
      .tape.stuck {
        --tapeOpacity: 1;
        filter: drop-shadow(0 1px 0.2px rgba(0, 0, 0, 0.22));
        cursor: default;
      }

      .toast {
        position: fixed;
        top: 16px;
        left: 50%;
        transform: translateX(-50%);
        background: #1f1f1f;
        color: #fff;
        padding: 8px 12px;
        border-radius: 10px;
        font-size: 13px;
        opacity: 0.94;
        z-index: 30;
      }

      /* ===== 토마토 이스터에그 ===== */
      .tomato {
        position: absolute;
        top: -60px; /* 화면 위에서 시작 */
        left: 0;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        pointer-events: none;
        z-index: 5;
        /* 토마토 비주얼 (라디얼 그라디언트로 볼륨감) */
        background: radial-gradient(
          circle at 35% 30%,
          #ff8f8f 0%,
          #ff4040 40%,
          #d21f1f 70%,
          #b51818 100%
        );
        box-shadow: inset -6px -8px 10px rgba(0, 0, 0, 0.18),
          inset 6px 8px 12px rgba(255, 255, 255, 0.25),
          0 8px 18px rgba(0, 0, 0, 0.12);
        /* 잎사귀 */
      }
      .tomato:before {
        content: '';
        position: absolute;
        top: -8px;
        left: 50%;
        transform: translateX(-50%) rotate(8deg);
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-bottom: 12px solid #1f7a2e;
        filter: drop-shadow(0 1px 0 rgba(0, 0, 0, 0.2));
      }

      @keyframes tomato-fall {
        0% {
          transform: translateY(0) scale(1);
        }
        70% {
          transform: translateY(var(--fallDist, 420px)) scale(1);
        }
        80% {
          transform: translateY(calc(var(--fallDist, 420px) - 14px)) scale(1.02);
        }
        100% {
          transform: translateY(var(--fallDist, 420px)) scale(1);
          opacity: 1;
        }
      }
      @keyframes tomato-fade {
        to {
          opacity: 0;
        }
      }
    </style>
  </head>
  <body>
    <button id="reset" type="button">초기화</button>
    <main id="board" aria-label="보드"></main>
    <section id="bar" aria-label="입력">
      <div class="roll" role="group">
        <input
          id="word"
          type="text"
          placeholder="테이프에 단어를 입력하세요!"
          autocomplete="off"
          autocapitalize="none"
          spellcheck="false"
          enterkeyhint="done"
          aria-label="단어 입력"
        />
        <button id="add" type="button">테이프 뜯기</button>
      </div>
    </section>

    <script>
      (function () {
        var board = document.getElementById('board');
        var input = document.getElementById('word');
        var addBtn = document.getElementById('add');
        var resetBtn = document.getElementById('reset');
        var LS = 'tapeBoard_ascii_v1';

        /* CSS 변수 읽기 */
        function cssVar(pxName) {
          var v = getComputedStyle(document.documentElement)
            .getPropertyValue(pxName)
            .trim();
          return parseInt(v, 10) || 0;
        }
        var TAPE_W = cssVar('--tapeW');
        var TAPE_H = cssVar('--tapeH');

        function toast(msg) {
          var t = document.createElement('div');
          t.className = 'toast';
          t.textContent = msg;
          document.body.appendChild(t);
          setTimeout(function () {
            if (t && t.parentNode) t.parentNode.removeChild(t);
          }, 1400);
        }

        function snapshot() {
          var arr = [],
            nodes = board.querySelectorAll('.tape');
          nodes.forEach(function (n) {
            arr.push({
              id: n.dataset.id,
              text: n.querySelector('.label').textContent,
              x: parseFloat(n.style.left) || 24,
              y: parseFloat(n.style.top) || 24,
              stuck: n.classList.contains('stuck'),
              opacity:
                parseFloat(
                  getComputedStyle(n).getPropertyValue('--tapeOpacity')
                ) || 0.88,
            });
          });
          return { items: arr };
        }
        function save() {
          try {
            localStorage.setItem(LS, JSON.stringify(snapshot()));
          } catch (e) {}
        }
        function load() {
          try {
            var raw = localStorage.getItem(LS);
            if (!raw) return;
            var data = JSON.parse(raw);
            if (data && data.items) data.items.forEach(spawn);
          } catch (e) {}
        }

        function makeDraggable(node) {
          var sx = 0,
            sy = 0,
            ox = 0,
            oy = 0,
            dragging = false,
            pid = null;
          function move(e) {
            if (!dragging) return;
            var dx = e.clientX - sx,
              dy = e.clientY - sy;
            var rB = board.getBoundingClientRect();
            var rN = node.getBoundingClientRect();
            var left = Math.max(6, Math.min(rB.width - rN.width - 6, ox + dx));
            var top = Math.max(6, Math.min(rB.height - rN.height - 6, oy + dy));
            node.style.left = left + 'px';
            node.style.top = top + 'px';
          }
          function up() {
            if (!dragging) return;
            dragging = false;
            try {
              if (pid != null) node.releasePointerCapture(pid);
            } catch (err) {}
            window.removeEventListener('pointermove', move);
            window.removeEventListener('pointerup', up);
            save();
          }
          node.addEventListener(
            'pointerdown',
            function (e) {
              if (node.classList.contains('stuck')) return;
              if (typeof e.button !== 'undefined' && e.button !== 0) return;
              var r = node.getBoundingClientRect(),
                b = board.getBoundingClientRect();
              sx = e.clientX;
              sy = e.clientY;
              ox = r.left - b.left;
              oy = r.top - b.top;
              pid = e.pointerId;
              dragging = true;
              try {
                if (pid != null) node.setPointerCapture(pid);
              } catch (err) {}
              window.addEventListener('pointermove', move, { passive: true });
              window.addEventListener('pointerup', up, { passive: true });
              e.preventDefault();
            },
            { passive: false }
          );
          node.addEventListener('dblclick', function () {
            node.classList.toggle('stuck');
            save();
          });
        }

        /* 방향별 삼각형 clip-path */
        function triClip(direction) {
          return direction === 'left'
            ? 'polygon(0% 50%, 100% 0%, 100% 100%)'
            : 'polygon(100% 50%, 0% 0%, 0% 100%)';
        }

        /* 세로 균등 분포(구간 분할 + 지터) */
        function stratifiedPositions(totalHeight, count, minPad) {
          var positions = [];
          if (count <= 0) return positions;
          var segmentH = totalHeight / count;
          for (var i = 0; i < count; i++) {
            var segTop = i * segmentH,
              segBottom = (i + 1) * segmentH;
            var low = segTop + minPad,
              high = segBottom - minPad;
            if (high < low) {
              var mid = (segTop + segBottom) / 2;
              low = mid;
              high = mid;
            }
            var y = low + Math.random() * Math.max(0, high - low);
            positions.push(y);
          }
          return positions;
        }

        /* 덧붙이는 뜯김 조각(좌우) - 균등 분포 */
        function addRandomChips(tapeEl) {
          var h = TAPE_H;
          var countLeft = 5 + Math.floor(Math.random() * 3); // 5~7개
          var countRight = 5 + Math.floor(Math.random() * 3); // 5~7개
          var W_MIN = 6,
            W_MAX = 14,
            H_MIN = 6,
            H_MAX = 14;
          var posLeft = stratifiedPositions(h, countLeft, 5);
          var posRight = stratifiedPositions(h, countRight, 5);

          function addOne(side, baseTop) {
            var chip = document.createElement('div');
            chip.className = 'chip ' + side;
            var w = W_MIN + Math.floor(Math.random() * (W_MAX - W_MIN + 1));
            var hh = H_MIN + Math.floor(Math.random() * (H_MAX - H_MIN + 1));
            var jitter = Math.floor(Math.random() * 5) - 2; // -2~+2px
            var top = Math.max(
              0,
              Math.min(h - hh, Math.round(baseTop + jitter))
            );
            chip.style.width = w + 'px';
            chip.style.height = hh + 'px';
            chip.style.top = top + 'px';
            chip.style.clipPath = triClip(side);
            if (side === 'left') {
              chip.style.left = -w + 2 + 'px';
            } else {
              chip.style.right = -w + 2 + 'px';
            }
            tapeEl.appendChild(chip);
          }
          posLeft.forEach(function (y) {
            addOne('left', y);
          });
          posRight.forEach(function (y) {
            addOne('right', y);
          });
        }

        function spawn(opt) {
          opt = opt || {};
          var v = (opt.text || '').trim();
          if (!v) return null;
          var n = document.createElement('div');
          n.className = 'tape';
          n.dataset.id =
            opt.id ||
            (window.crypto && crypto.randomUUID
              ? crypto.randomUUID()
              : String(Date.now() + Math.random()));
          var x =
            typeof opt.x === 'number'
              ? opt.x
              : Math.random() * (board.clientWidth - (TAPE_W + 40)) + 20;
          var y = typeof opt.y === 'number' ? opt.y : 20;
          n.style.left = x + 'px';
          n.style.top = y + 'px';

          var bg = document.createElement('div');
          bg.className = 'bg';
          var label = document.createElement('span');
          label.className = 'label';
          label.textContent = v;
          if (typeof opt.opacity === 'number') {
            n.style.setProperty('--tapeOpacity', String(opt.opacity));
          }

          n.appendChild(bg);
          addRandomChips(n); /* 좌우에 삼각형 조각 덧붙임 */
          n.appendChild(label);

          board.appendChild(n);
          if (opt.stuck) n.classList.add('stuck');
          makeDraggable(n);
          save();
          return n;
        }

        /* ===== 토마토 이스터에그 ===== */
        function dropTomato() {
          var t = document.createElement('div');
          t.className = 'tomato';

          var bRect = board.getBoundingClientRect();
          var left = Math.max(
            8,
            Math.floor(Math.random() * (bRect.width - 56))
          ); // 좌우 랜덤
          t.style.left = left + 'px';

          // 떨어지는 거리(보드 높이에 맞춤)
          var fallDist = Math.max(120, bRect.height - 140);
          t.style.setProperty('--fallDist', fallDist + 'px');

          board.appendChild(t);

          // 낙하 애니메이션 시작
          t.style.animation =
            'tomato-fall 1.0s cubic-bezier(.2,.8,.2,1) forwards';
          // 2초 후 서서히 사라지기
          setTimeout(function () {
            t.style.animation = 'tomato-fade 0.9s ease forwards';
          }, 2000);

          // 3초 뒤 완전 제거
          setTimeout(function () {
            if (t && t.parentNode) t.parentNode.removeChild(t);
          }, 3000);
        }

        function submit() {
          var v = input.value.trim();
          if (!v) return;

          // === 이스터에그 트리거 ===
          if (v.toLowerCase() === 'tomato') {
            dropTomato();
          }

          // 평소처럼 테이프도 생성 (원치 않으면 아래 4줄을 주석 처리)
          var br = document.querySelector('#bar .roll').getBoundingClientRect();
          var b = board.getBoundingClientRect();
          spawn({
            text: v,
            x: Math.random() * (board.clientWidth - (TAPE_W + 40)) + 20,
            y: Math.max(12, br.top - b.top - (TAPE_H + 32)),
          });

          input.value = '';
          input.focus();
        }

        addBtn.addEventListener('click', submit);

        /* IME(한글) 중 Enter 중복 방지 */
        var composing = false;
        input.addEventListener('compositionstart', function () {
          composing = true;
        });
        input.addEventListener('compositionend', function () {
          composing = false;
        });
        input.addEventListener('keydown', function (e) {
          if (e.key === 'Enter') {
            if (e.isComposing || composing) return;
            e.preventDefault();
            submit();
          }
        });

        resetBtn.addEventListener('click', function () {
          try {
            localStorage.setItem(LS, JSON.stringify({ items: [] }));
          } catch (e) {}
          board.querySelectorAll('.tape').forEach(function (n) {
            n.remove();
          });
          toast('초기화 완료');
        });

        load();
      })();
    </script>
  </body>
</html>
